<?xml version="1.0" encoding="UTF-8"?>
<project name="test-jenkins" default="build">

    <target name="build"
            depends="prepare, phpcs, phpcpd, finalize"
            description=""/>

    <target name="prepare"
            depends="-clean-dir, -init-dir"
            description="Prepare for build">
    </target>

    <target name="-clean-dir"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/logs" />
    </target>

    <target name="-init-dir"
            description="Create directories and files">
        <mkdir dir="${basedir}/build/logs" />
        <touch file="${basedir}/build/logs/comment.md" />
        <touch file="${basedir}/build/logs/comment-summary.md" />
        <touch file="${basedir}/build/logs/comment-body.md" />
        <touch file="${basedir}/build/logs/comment-phpcs.md" />
        <touch file="${basedir}/build/logs/comment-phpcpd.md" />
    </target>

    <!--<target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="phploc">
            <arg value="-log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg value="-names"/>
            <arg value="*.php,*.inc,*.install,*.module,*.test,*.theme,*.engine" />
            <arg path="${basedir}/docroot/sites/all/modules/custom" />
        </exec>
    </target>-->

    <target name="phpcs"
            depends="-run-phpcs, -phpcs-failed, -phpcs-succeed"
            description="Run PHP_Codesniffer and update comments files" />

    <target name="-run-phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs" output="${basedir}/build/logs/comment-phpcs.md" resultproperty="test.phpcs" failonerror="false">
            <arg value="--standard=Drupal" />
            <arg value="--report=full" />
            <arg value="--extensions='php,module,inc,install,profile,theme,info'" />
            <arg path="${basedir}/docroot/sites/all/modules/custom" />
        </exec>
        <condition property="test.phpcs.succeed">
            <equals arg1="${test.phpcs}" arg2="0" />
        </condition>
        <condition property="test.phpcs.failed">
            <equals arg1="${test.phpcs}" arg2="1" />
        </condition>
    </target>

    <target name="-phpcs-failed"
            if="test.phpcs.failed"
            description="Update comment-summary with PHP-Codesniffer result and prepare the comment-phpcs file.">
        <replace file="${basedir}/build/logs/comment-phpcs.md" value="">
            <replacetoken><![CDATA[UPGRADE TO PHP_CODESNIFFER 2.0 TO FIX ERRORS AUTOMATICALLY]]></replacetoken>
        </replace>
        <replaceregexp file="${basedir}/build/logs/comment-phpcs.md"
                       match="(FILE: (.*)sites/all/)"
                       replace="+ "
                       byline="true" />
        <replaceregexp file="${basedir}/build/logs/comment-phpcs.md"
                       match="(----*)"
                       replace="${line.separator}"
                       byline="true" />
        <concat append="true" destfile="${basedir}/build/logs/comment-body.md">#### Codesniffer${line.separator}</concat>
        <concat destfile="${basedir}/build/logs/comment-body.md" append="true">
            <filelist dir="${basedir}/build/logs" files="comment-phpcs.md" />
            <filterchain>
                <linecontains negate="true">
                    <contains value="Time:" />
                    <contains value="Mb" />
                </linecontains>
                <linecontains negate="true">
                    <contains value=" ERROR(S) AFFECTING " />
                </linecontains>
            </filterchain>
        </concat>
        <concat append="true" destfile="${basedir}/build/logs/comment-summary.md">- [ ] Codesniffer${line.separator}</concat>
    </target>

    <target name="-phpcs-succeed"
            if="test.phpcs.succeed"
            description="Update comment-summary with PHP-Codesniffer result.">
        <concat append="true" destfile="${basedir}/build/logs/comment-summary.md">- [X] Codesniffer${line.separator}</concat>
    </target>

    <target name="phpcpd"
            depends="-run-phpcpd, -phpcpd-failed, -phpcpd-succeed"
            description="Run PHP_Codesniffer and update comments files" />

    <target name="-run-phpcpd"
            description="Find duplicated code.">
        <exec executable="phpcpd" output="${basedir}/build/logs/comment-phpcpd.md" resultproperty="test.phpcpd" failonerror="false">
            <arg value="--names='*.php,*.inc,*.install,*.module,*.test,*.theme,*.engine'" />
            <arg path="${basedir}/docroot/sites/all/modules/custom" />
        </exec>
        <condition property="test.phpcpd.succeed">
            <equals arg1="${test.phpcpd}" arg2="0" />
        </condition>
        <condition property="test.phpcpd.failed">
            <equals arg1="${test.phpcpd}" arg2="1" />
        </condition>
    </target>

    <target name="-phpcpd-failed"
            if="test.phpcpd.failed"
            description="Update comment-summary with Copy/Paste detector result and prepare the comment-phpcpd file.">
        <replace file="${basedir}/build/logs/comment-phpcpd.md" value="">
            <replacetoken><![CDATA[phpcpd 2.0.1 by Sebastian Bergmann.]]></replacetoken>
        </replace>
        <concat append="true" destfile="${basedir}/build/logs/comment-body.md">#### Copy/Paste Detector${line.separator}</concat>
        <concat destfile="${basedir}/build/logs/comment-body.md" append="true">
            <filelist dir="${basedir}/build/logs" files="comment-phpcpd.md" />
            <filterchain>
                <linecontains negate="true">
                    <contains value="Time:" />
                    <contains value="Mb" />
                </linecontains>
            </filterchain>
        </concat>
        <concat append="true" destfile="${basedir}/build/logs/comment-summary.md">- [ ] Copy/Paste${line.separator}</concat>
    </target>

    <target name="-phpcpd-succeed"
            if="test.phpcpd.succeed"
            description="Update comment-summary with Copy/Paste detector result.">
        <concat append="true" destfile="${basedir}/build/logs/comment-summary.md">- [X] Copy/Paste${line.separator}</concat>
    </target>

    <target name="finalize"
            depends="-define-status, -prepare-comment, -prepare-comment-failed, -slack-notification-succeed, -slack-notification-failed"
            description="Determine the build status">
        <fail if="build.failed" />
    </target>

    <target name="-slack-notification-succeed"
            description="Send notification to Slack in case of success"
            if="build.succeed">
        <exec command="curl -X POST --data-urlencode 'payload={&quot;channel&quot;: &quot;#general&quot;, &quot;username&quot;: &quot;Jenkins CI&quot;, &quot;text&quot;: &quot;@Vincent success&quot;, &quot;icon_emoji&quot;: &quot;:slack:&quot;}' https://hooks.slack.com/services/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" />
    </target>

    <target name="-slack-notification-failed"
            description="Send notification to Slack in case of failure"
            if="build.failed">
        <exec command="sed '/^\s*$/d' ${basedir}/build/logs/comment-body.md > ${basedir}/build/logs/comment-body-trimmed.md" />
        <exec command="curl -X POST --data-urlencode 'payload={&quot;channel&quot;: &quot;#general&quot;, &quot;username&quot;: &quot;Jenkins CI&quot;, &quot;text&quot;: &quot;@${commitAuthor} failed&quot;, &quot;icon_emoji&quot;: &quot;:slack:&quot;}' https://hooks.slack.com/services/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" />
        <exec command="curl -F file=@${basedir}/build/logs/comment-body-trimmed.md -F channels=C03S50YCM -F token=xoxp-3889032375-3889032391-3890039067-ccecaa https://slack.com/api/files.upload" />
    </target>

    <target name="-prepare-comment"
            description="Prepare the comment file used on Github">
        <concat append="true" destfile="${basedir}/build/logs/comment.md">## Summary${line.separator}</concat>
        <concat destfile="${basedir}/build/logs/comment.md" append="true">
            <filelist dir="${basedir}/build/logs" files="comment-summary.md"/>
        </concat>
    </target>

    <target name="-prepare-comment-failed"
            if="build.failed"
            description="Update the comment with details in case of build failure.">
        <concat append="true" destfile="${basedir}/build/logs/comment.md">${line.separator}-----------${line.separator}</concat>
        <concat append="true" destfile="${basedir}/build/logs/comment.md">## Details${line.separator}</concat>
        <concat destfile="${basedir}/build/logs/comment.md" append="true">
            <filelist dir="${basedir}/build/logs" files="comment-body.md"/>
        </concat>
    </target>

    <target name="-define-status"
            description="Set the build.status value to determine the build status.">
        <condition property="build.failed">
            <or>
                <isfailure code="${test.phpcs}" />
                <isfailure code="${test.phpcpd}" />
            </or>
        </condition>
        <condition property="build.succeed">
            <isfalse value="${build.failed}" />
        </condition>
    </target>
</project>